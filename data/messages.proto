syntax = "proto3";

package data;

message ChainStatus {
    uint32 blockHeight = 1;
    bool syncedToChain = 2;
}

message Account {
    enum AccountStatus {        
        WAITING_DEPOSIT = 0;
        WAITING_DEPOSIT_CONFIRMATION = 1;
        PROCESSING_BREEZ_CONNECTION = 2;
        PROCESSING_WITHDRAWAL = 3;
        ACTIVE = 4;
    }
    string id = 1;
    int64 balance = 2;      
    int64 walletBalance = 3;
    AccountStatus status = 4;   

    //maximum payment this node can receive via lightning  
    int64 maxAllowedToReceive = 5;

    //maximum payment this node can pay via lightning    
    int64 maxAllowedToPay = 6;

    //The lightning absolute payment amount
    int64 maxPaymentAmount = 7;   

    //The routing node fee as reflected in the node policy
    int64 routingNodeFee = 8;

    //the state of the account, if not enabled then no automatic
    //attempt to open a channel with breez node will be made.
    bool enabled = 9;

    //maximum chan reserve accross all channels of this account.
    int64 maxChanReserve = 10;
}

message Payment {
    enum PaymentType { 
        DEPOSIT = 0;
        WITHDRAWAL = 1;
        SENT = 2;
        RECEIVED = 3; 
    }
    
    PaymentType type = 1;    
    int64 amount = 3;
    int64 creationTimestamp = 4;    
    InvoiceMemo invoiceMemo = 6;
    string redeemTxID = 7;
    string paymentHash = 8;
    string destination = 9;
    uint32 PendingExpirationHeight = 10;
    int64 PendingExpirationTimestamp = 11;
    int64 fee = 12;
    string preimage = 13;
}

message PaymentsList {
    repeated Payment paymentsList = 1;
}

message SendWalletCoinsRequest {
    string address = 1;
    int64 amount = 2;
    int64 satPerByteFee = 3;    
}

message PayInvoiceRequest {
    int64 amount = 1;
    string paymentRequest = 2;
}

message InvoiceMemo {
    string description = 1;
    int64 amount = 2;
    string payeeName = 3;
    string payeeImageURL = 4;    
    string payerName = 5;
    string payerImageURL = 6;
    bool transferRequest = 7;
    int64 expiry = 8;
}

message Invoice {   
    InvoiceMemo memo = 1;
    bool settled = 2;    
    int64 amtPaid = 3;
}

message NotificationEvent {
    enum NotificationType {
        READY = 0;
        INITIALIZATION_FAILED = 1;        
        ACCOUNT_CHANGED = 2;        
        PAYMENT_SENT = 3;
        INVOICE_PAID = 4;
        ROUTING_NODE_CONNECTION_CHANGED = 5;
        LIGHTNING_SERVICE_DOWN = 6;
        FUND_ADDRESS_CREATED = 7;
        FUND_ADDRESS_UNSPENT_CHANGED = 8;
        BACKUP_SUCCESS = 9;
        BACKUP_FAILED = 10;
        BACKUP_AUTH_FAILED = 11;
        BACKUP_NODE_CONFLICT = 12;
        BACKUP_REQUEST = 13;
    }

    NotificationType type = 1;
    repeated string data = 2;
}

message AddFundInitReply {
    string address = 1;
    int64 maxAllowedDeposit = 2;
    string errorMessage = 3;
    string backupJson = 4;
    int64 requiredReserve = 5;
}

message AddFundReply {
    string errorMessage = 1;
}

message RefundRequest {
    string address = 1;
    string refundAddress = 2;
}

message FundStatusReply {
    enum FundStatus {
        NO_FUND = 0;
        WAITING_CONFIRMATION = 1;
        CONFIRMED = 2;
        TRANSFER_ERROR = 3;     
    }
    FundStatus status = 1;
    string errorMessage = 2;
}

message RemoveFundRequest {
  string address = 1;
  int64 amount = 2;
}

message RemoveFundReply{
  string txid = 1;  
  string errorMessage = 2;
}

message SwapAddressInfo {   
    string address = 1;
    string PaymentHash = 2;     
    int64 ConfirmedAmount = 3;
    repeated string ConfirmedTransactionIds = 4;
    int64 PaidAmount = 5;
    uint32 lockHeight = 6;
    string errorMessage = 7;
    string lastRefundTxID = 8;
}

message SwapAddressList {
    repeated SwapAddressInfo addresses = 1;
}

message CreateRatchetSessionRequest {
    string secret = 1;
    string remotePubKey = 2;
    string sessionID = 3;
    uint64 expiry = 4;
}

message CreateRatchetSessionReply {
    string sessionID = 1;    
    string secret = 2;
    string pubKey = 3;
}

message RatchetSessionInfoReply {
    string sessionID = 1;
    bool initiated = 2;
    string userInfo = 3;
}

message RatchetSessionSetInfoRequest {
    string sessionID = 1;
    string userInfo = 2;
}

message RatchetEncryptRequest {
    string sessionID = 1;
    string message = 2;
}

message RatchetDecryptRequest {
    string sessionID = 1;
    string encryptedMessage = 2;
}

message BootstrapFilesRequest {
    string WorkingDir = 1;
    repeated string FullPaths = 2;
}